# Generated by LakehousePlumber
# Pipeline: bronze_load
# FlowGroup: part_bronze_dim
# Generated: 2025-07-14T12:55:59.812481

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "part_bronze_dim"
PIPELINE_GROUP = "bronze_load"

# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_part_raw():
    """Load part table from raw schema"""
    df = spark.readStream.table("acmi_edw_dev.edw_raw.part")

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


# ============================================================================
# TRANSFORMATION VIEWS
# ============================================================================


@dlt.view(comment="SQL transform: part_bronze_cleanse")
def v_part_bronze_cleaned():
    """SQL transform: part_bronze_cleanse"""
    return spark.sql(
        """SELECT
  p_partkey as part_id,
  p_name as name,
  p_mfgr as manufacturer,
  p_brand as brand,
  p_type as type,
  p_size as size,
  p_container as container,
  p_retailprice as retail_price,
  p_comment as comment,
  _source_file_path,
  _source_file_size,
  _source_file_modification_time,
  _record_hash,
  _processing_timestamp
FROM stream(v_part_raw)"""
    )


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acmi_edw_dev.edw_bronze.part",
    comment="Streaming table: part",
    table_properties={
        "delta.autoOptimize.optimizeWrite": "true",
        "delta.enableChangeDataFeed": "true",
    },
)


# Define append flow(s)
@dlt.append_flow(
    target="acmi_edw_dev.edw_bronze.part",
    name="f_part_bronze",
    comment="Append flow to acmi_edw_dev.edw_bronze.part",
)
def f_part_bronze():
    """Append flow to acmi_edw_dev.edw_bronze.part"""
    # Streaming flow
    df = spark.readStream.table("v_part_bronze_cleaned")

    return df
