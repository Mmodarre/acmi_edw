# Generated by LakehousePlumber
# Pipeline: bronze_load
# FlowGroup: orders_bronze
# Generated: 2025-07-14T15:38:47.068567

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "orders_bronze"
PIPELINE_GROUP = "bronze_load"

# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_orders_raw():
    """Load orders table from raw schema"""
    df = spark.readStream.table("acmi_edw_dev.edw_raw.orders")

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


# ============================================================================
# TRANSFORMATION VIEWS
# ============================================================================


@dlt.view(comment="SQL transform: orders_bronze_cleanse")
def v_orders_bronze_cleaned():
    """SQL transform: orders_bronze_cleanse"""
    return spark.sql(
        """SELECT
  o_orderkey as order_id,
  o_custkey as customer_id,
  o_orderstatus as order_status,
  o_totalprice as total_price,
  o_orderdate as order_date,
  o_orderpriority as order_priority,
  o_clerk as clerk,
  o_shippriority as ship_priority,
  o_comment as comment,
  _source_file_path,
  _source_file_size,
  _source_file_modification_time,
  _record_hash,
  _processing_timestamp
FROM stream(v_orders_raw)"""
    )


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acmi_edw_dev.edw_bronze.orders",
    comment="Streaming table: orders",
    table_properties={
        "delta.autoOptimize.optimizeWrite": "true",
        "delta.enableChangeDataFeed": "true",
    },
)


# Define append flow(s)
@dlt.append_flow(
    target="acmi_edw_dev.edw_bronze.orders",
    name="f_orders_bronze",
    comment="Append flow to acmi_edw_dev.edw_bronze.orders",
)
def f_orders_bronze():
    """Append flow to acmi_edw_dev.edw_bronze.orders"""
    # Streaming flow
    df = spark.readStream.table("v_orders_bronze_cleaned")

    return df
