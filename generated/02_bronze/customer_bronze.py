# Generated by LakehousePlumber
# Pipeline: bronze_load
# FlowGroup: customer_bronze
# Generated: 2025-07-12T11:31:31.170806

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "customer_bronze"
PIPELINE_GROUP = "bronze_load"

# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_customer_bronze():
    """Load customer table from raw schema"""
    df = spark.readStream.table("acmi_edw_dev.edw_raw.customer")

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


# ============================================================================
# TRANSFORMATION VIEWS
# ============================================================================


@dlt.view(comment="SQL transform: customer_bronze_cleanse")
def v_customer_bronze_cleaned():
    """SQL transform: customer_bronze_cleanse"""
    return spark.sql(
        """SELECT
  c_custkey as customer_id,
  c_name as name,
  c_address as address,
  c_nationkey as nationkey,
  c_phone as phone,
  c_acctbal as account_balance,
  c_mktsegment as mktsegment,
  c_comment as comment,
  _source_file_path,
  _source_file_size,
  _source_file_modification_time,
  _record_hash
FROM stream(v_customer_bronze)"""
    )


@dlt.view()
# These expectations will fail the pipeline if violated
@dlt.expect_all_or_fail(
    {
        "valid_custkey": "customer_id IS NOT NULL AND customer_id > 0",
        "valid_customer_name": "name IS NOT NULL AND LENGTH(TRIM(name)) > 0",
        "valid_nation_key": "nationkey IS NOT NULL AND nationkey >= 0",
    }
)
# These expectations will log warnings but not drop rows
@dlt.expect_all(
    {
        "valid_phone_format": "phone IS NULL OR LENGTH(phone) >= 10",
        "valid_account_balance": "account_balance IS NULL OR account_balance >= -10000",
        "valid_market_segment": "mktsegment IS NULL OR mktsegment IN ('BUILDING', 'FURNITURE', 'HOUSEHOLD', 'MACHINERY')",
    }
)
def v_customer_bronze_DQE():
    """Apply data quality checks to customer"""
    df = spark.readStream.table("v_customer_bronze_cleaned")

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table for CDC
dlt.create_streaming_table(
    name="acmi_edw_dev.edw_bronze.customer_dim",
    comment="Streaming table: customer_dim",
    table_properties={
        "delta.autoOptimize.optimizeWrite": "true",
        "delta.enableChangeDataFeed": "true",
    },
)

# CDC mode using auto_cdc
dlt.create_auto_cdc_flow(
    target="acmi_edw_dev.edw_bronze.customer_dim",
    source="v_customer_bronze_DQE",
    keys=["customer_id"],
    sequence_by="_source_file_modification_time",
    stored_as_scd_type=2,
    ignore_null_updates=False,
)
