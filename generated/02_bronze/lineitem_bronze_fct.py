# Generated by LakehousePlumber
# Pipeline: bronze_load
# FlowGroup: lineitem_bronze_fct
# Generated: 2025-07-14T11:10:05.230263

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "lineitem_bronze_fct"
PIPELINE_GROUP = "bronze_load"

# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_lineitem_bronze():
    """Load lineitem table from raw schema"""
    df = spark.readStream.table("acmi_edw_dev.edw_raw.lineitem")

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


# ============================================================================
# TRANSFORMATION VIEWS
# ============================================================================


@dlt.view(comment="SQL transform: lineitem_bronze_cleanse")
def v_lineitem_bronze_cleaned():
    """SQL transform: lineitem_bronze_cleanse"""
    return spark.sql(
        """SELECT
  l_orderkey as order_id,
  l_partkey as part_id,
  l_suppkey as supplier_id,
  l_linenumber as line_number,
  l_quantity as quantity,
  l_extendedprice as extended_price,
  l_discount as discount,
  l_tax as tax,
  l_returnflag as return_flag,
  l_linestatus as line_status,
  l_shipdate as ship_date,
  l_commitdate as commit_date,
  l_receiptdate as receipt_date,
  l_shipinstruct as ship_instruct,
  l_shipmode as ship_mode,
  l_comment as comment,
  _source_file_path,
  _source_file_size,
  _source_file_modification_time,
  _record_hash,
  _processing_timestamp
FROM stream(v_lineitem_bronze)"""
    )


@dlt.view()
# These expectations will fail the pipeline if violated
@dlt.expect_all_or_fail(
    {
        "valid_orderkey": "order_id IS NOT NULL AND order_id > 0",
        "valid_partkey": "part_id IS NOT NULL AND part_id > 0",
        "valid_suppkey": "supplier_id IS NOT NULL AND supplier_id > 0",
        "valid_linenumber": "line_number IS NOT NULL AND line_number > 0",
        "valid_quantity": "quantity IS NOT NULL AND quantity > 0",
        "valid_extendedprice": "extendedprice IS NOT NULL AND extendedprice > 0",
    }
)
# These expectations will log warnings but not drop rows
@dlt.expect_all(
    {
        "valid_discount": "discount IS NOT NULL AND discount > 0",
        "valid_tax": "tax IS NOT NULL AND tax > 0",
        "valid_returnflag": "return_flag IS NULL OR return_flag IN ('R', 'N')",
        "valid_linestatus": "line_status IS NULL OR line_status IN ('F', 'O')",
        "valid_shipdate": "(ship_date IS NOT NULL AND ship_date >= '1900-01-01') or ship_date is null",
        "valid_commitdate": "commit_date IS NOT NULL AND commit_date > 0",
        "valid_receiptdate": "(receipt_date IS NOT NULL AND receipt_date >= '1900-01-01') or receipt_date is null",
        "valid_shipmode": "ship_mode IS NOT NULL AND ship_mode IN ('RAIL','REG AIR','TRUCK','MAIL','SHIP','FOB')",
    }
)
def v_lineitem_bronze_DQE():
    """Apply data quality checks to lineitem"""
    df = spark.readStream.table("v_lineitem_bronze_cleaned")

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table for CDC
dlt.create_streaming_table(
    name="acmi_edw_dev.edw_bronze.lineitem_fct",
    comment="Streaming table: lineitem_fct",
    table_properties={
        "delta.autoOptimize.optimizeWrite": "true",
        "delta.enableChangeDataFeed": "true",
    },
)

# CDC mode using auto_cdc
dlt.create_auto_cdc_flow(
    target="acmi_edw_dev.edw_bronze.lineitem_fct",
    source="v_lineitem_bronze_DQE",
    keys=["order_id"],
    sequence_by="_source_file_modification_time",
    stored_as_scd_type=1,
    ignore_null_updates=False,
)
