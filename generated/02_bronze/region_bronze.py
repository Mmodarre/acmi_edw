# Generated by LakehousePlumber
# Pipeline: bronze_load
# FlowGroup: region_bronze
# Generated: 2025-07-14T15:38:47.146853

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "region_bronze"
PIPELINE_GROUP = "bronze_load"

# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_region_raw():
    """Load region table from raw schema"""
    df = spark.readStream.table("acmi_edw_dev.edw_raw.region")

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


# ============================================================================
# TRANSFORMATION VIEWS
# ============================================================================


@dlt.view(comment="SQL transform: region_bronze_cleanse")
def v_region_bronze_cleaned():
    """SQL transform: region_bronze_cleanse"""
    return spark.sql(
        """SELECT
  r_regionkey as region_id,
  r_name as name,
  r_comment as comment,
  _source_file_path,
  _source_file_size,
  _source_file_modification_time,
  _record_hash,
  _processing_timestamp
FROM stream(v_region_raw)"""
    )


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acmi_edw_dev.edw_bronze.region",
    comment="Streaming table: region",
    table_properties={
        "delta.autoOptimize.optimizeWrite": "true",
        "delta.enableChangeDataFeed": "true",
    },
)


# Define append flow(s)
@dlt.append_flow(
    target="acmi_edw_dev.edw_bronze.region",
    name="f_region_bronze",
    comment="Append flow to acmi_edw_dev.edw_bronze.region",
)
def f_region_bronze():
    """Append flow to acmi_edw_dev.edw_bronze.region"""
    # Streaming flow
    df = spark.readStream.table("v_region_bronze_cleaned")

    return df
