# Generated by LakehousePlumber
# Pipeline: raw_ingestions
# FlowGroup: supplier_ingestion
# Generated: 2025-07-14T14:42:39.219525

from pyspark.sql import functions as F
from pyspark.sql.functions import hash
import dlt

# Pipeline Configuration
PIPELINE_ID = "supplier_ingestion"
PIPELINE_GROUP = "raw_ingestions"

# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_supplier_cloudfiles():
    """Load supplier Parquet files from landing volume"""
    df = (
        spark.readStream.format("cloudFiles")
        .option("cloudFiles.format", "parquet")
        .option("cloudFiles.maxFilesPerTrigger", 50)
        .option("cloudFiles.inferColumnTypes", True)
        .option("cloudFiles.schemaEvolutionMode", "addNewColumns")
        .option("cloudFiles.rescuedDataColumn", "_rescued_data")
        .load("/Volumes/acmi_edw_dev/edw_raw/landing_volume/supplier/*.parquet")
    )

    # Add operational metadata columns
    df = df.withColumn("_source_file_path", F.col("_metadata.file_path"))
    df = df.withColumn("_source_file_modification_time", F.col("_metadata.file_modification_time"))
    df = df.withColumn("_record_hash", F.xxhash64(*[F.col(c) for c in df.columns]))
    df = df.withColumn("_source_file_size", F.col("_metadata.file_size"))

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acmi_edw_dev.edw_raw.supplier",
    comment="Streaming table: supplier",
    table_properties={
        "delta.autoOptimize.optimizeWrite": "true",
        "delta.enableChangeDataFeed": "true",
    },
)


# Define append flow(s)
@dlt.append_flow(
    target="acmi_edw_dev.edw_raw.supplier",
    name="f_supplier_cloudfiles",
    comment="Append flow to acmi_edw_dev.edw_raw.supplier",
)
def f_supplier_cloudfiles():
    """Append flow to acmi_edw_dev.edw_raw.supplier"""
    # Streaming flow
    df = spark.readStream.table("v_supplier_cloudfiles")

    return df
