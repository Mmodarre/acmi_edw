# Generated by LakehousePlumber
# Pipeline: raw_ingestions
# FlowGroup: orders_ingestion
# Generated: 2025-07-11T10:27:34.550501

import dlt

# Pipeline Configuration
PIPELINE_ID = "orders_ingestion"
PIPELINE_GROUP = "raw_ingestions"

# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_orders_raw():
    """Load orders CSV files from landing volume"""
    df = (
        spark.readStream.format("cloudFiles")
        .option("cloudFiles.format", "csv")
        .option("cloudFiles.header", True)
        .option("cloudFiles.delimiter", "|")
        .option("cloudFiles.maxFilesPerTrigger", 10)
        .option("cloudFiles.inferColumnTypes", False)
        .option("cloudFiles.schemaEvolutionMode", "addNewColumns")
        .option("cloudFiles.rescuedDataColumn", "_rescued_data")
        .load("/Volumes/acmi_edw_dev/edw_raw/landing_volume/orders/*.csv")
    )

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acmi_edw_dev.edw_raw.orders",
    comment="Streaming table: orders",
    table_properties={
        "delta.autoOptimize.optimizeWrite": "true",
        "delta.enableChangeDataFeed": "true",
    },
)


# Define append flow(s)
@dlt.append_flow(
    target="acmi_edw_dev.edw_raw.orders",
    name="f_orders_bronze",
    comment="Append flow to acmi_edw_dev.edw_raw.orders",
)
def f_orders_bronze():
    """Append flow to acmi_edw_dev.edw_raw.orders"""
    # Streaming flow
    df = spark.readStream.table("v_orders_raw")

    return df
